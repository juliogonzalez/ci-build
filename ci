#!/bin/bash -e

source 'lib/actions'
source 'lib/checks'
source 'lib/colours'
source 'lib/help'
source 'lib/messages'

# Language (force it so getopt messages are always in english, as the script)
LANG=en_EN

# Get script name
SCRIPT=$(basename ${0})

# Supported distributions and PostgreSQL versions
SUPPORTEDDISTROS="centos6 ubuntu12.04"
SUPPORTEDPGVERS="9.1 9.2 9.3 9.4 9.5 9.6"

# read the options
ARGS=$(getopt -o h --long help,action:,pgver:,workspace:,labels:,tdsdir:,mssqlhost:,mssqlport:,mssqldb:,mssqluser:,mssqlpass:,postgresdb:,postgresuser:,postgrespass: -n "${SCRIPT}" -- "$@")
if [ $? -ne 0 ];
then
  print_incorrect_syntax
  exit 1
fi
eval set -- "${ARGS}"

# extract options and their arguments into variables
while true ; do
  case "${1}" in
    -h|--help)         help "${SUPPORTEDPGVERS}"; exit 1;;
    --action)       ACTION="${2}"; shift 2;;
    --pgver)        export PG_VER="${2}"; shift 2;;
    --workspace)    export WORKSPACE="${2}"; shift 2;;
    --tdsdir)       export TDSDIR="${2}"; shift 2;;
    --labels)       export LABELS="${2}"; shift 2;;
    --mssqlhost)    export MSSQLHOST="${2}"; shift 2;;
    --mssqlport)    export MSSQLPORT="${2}"; shift 2;;
    --mssqldb)      export MSSQLDB="${2}"; shift 2;;
    --mssqluser)    export MSSQLUSER="${2}"; shift 2;;
    --mssqlpass)    export MSSQLPASS="${2}"; shift 2;;
    --postgreshost) export POSTGRESHOST="${2}"; shift 2;;
    --postgresport) export POSTGRESPORT="${2}"; shift 2;;
    --postgresdb)   export POSTGRESDB="${2}"; shift 2;;
    --postgresuser) export POSTGRESUSER="${2}"; shift 2;;
    --postgrespass) export POSTGRESPASS="${2}"; shift 2;;
    --max_retries)  export MAX_RETRIES="${2}"; shift 2;;
    --wait_sec)     export WAIT_SEC="${2}"; shift 2;;
    --) shift ; break ;;
    *) print_incorrect_syntax; exit 1;;
  esac
done

# Check arguments for actions
case "${ACTION}" in
  update) ;;
  get_info) ;;
  mod_build)  if [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
              elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
              fi;;
  mod_install) if [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
               elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
               fi;;
  pg_stop) ;;
  pg_start) ;;
  pg_confdb)  if ! $(check_postgres_vars); then
                print_incorrect_syntax
                exit 1
              fi;;
  mssql_test) if ! $(check_postgres_vars) && ! $(check_mssql_vars); then
                print_incorrect_syntax
                exit 1
              elif [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
              elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
              fi;;
  pg_test)    if ! $(check_postgres_vars); then
                print_incorrect_syntax
                exit 1
              elif [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
              elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
              fi;;
  pg_dropdb)  if ! $(check_postgres_vars); then
                print_incorrect_syntax
                exit 1
              fi;;
  *) print_error_unknown_action
     exit 1;
esac

# Check PostgreSQL version
PG_VER="$(check_pgver)"
if [ "${PG_VER}" == "" ]; then
  print_error_unknown_unsupported_pgver
  exit 1
fi
export SHORTVER="$(echo ${PG_VER}|tr -d '.')"

# Check distribution
export DISTRO="$(detect_distro)"
if [ "${DISTRO}" == "" ]; then
  print_error_unsupported_distro
  exit 1
fi
export SHORTDISTRO="$(echo ${DISTRO}|tr -d '.')"

# Check chroot dir
CHROOTDIR="/opt/chroot/${DISTRO}/postgres${SHORTVER}"
if [ ! -d "${CHROOTDIR}" ]; then
  print_error_jail_not_found "${CHROOTDIR}"
  exit 1
fi

# End setting variables to be passed to the jail
export POSTGRESSCHEMA="postgresql${SHORTVER}_${SHORTDISTRO}_test"
export MSSQLSCHEMA="${POSTGRESSCHEMA}"
if [ "${DISTRO}" == "centos6" ]; then
  export PGBIN_PATH="/usr/pgsql-${PG_VER}/bin"
  export SERVICE_START_ORDER="sudo service postgresql-${PG_VER} start"
  export SERVICE_STOP_ORDER="sudo service postgresql-${PG_VER} stop"
  export POSTGRESPORT=$(sudo -E /usr/sbin/chroot --userspec=$(id -u):$(id -g) ${CHROOTDIR} /bin/bash +x -e <<'EOF'
sudo -iu postgres sed -n 's/^port = \([0-9]*\).*/\1/p' ${CHROOTDIR}/var/lib/pgsql/${PG_VER}/data/postgresql.conf
EOF
)
elif [ "${DISTRO}" == "ubuntu12.04" ]; then
  export PGBIN_PATH="/usr/lib/postgresql/${PG_VER}/bin"
  export SERVICE_START_ORDER="sudo service postgresql start ${PG_VER}"
  export SERVICE_STOP_ORDER="sudo service postgresql stop ${PG_VER}"
  export POSTGRESPORT=$(sudo -E /usr/sbin/chroot --userspec=$(id -u):$(id -g) ${CHROOTDIR} /bin/bash +x -e <<'EOF'
sudo -iu postgres sed -n 's/^port = \([0-9]*\).*/\1/p' ${CHROOTDIR}/etc/postgresql/${PG_VER}/main/postgresql.conf
EOF
)
fi

${ACTION}
